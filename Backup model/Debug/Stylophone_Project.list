
Stylophone_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046bc  080046bc  00006108  2**0
                  CONTENTS
  4 .ARM          00000008  080046bc  080046bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c4  080046c4  00006108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  080046cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000108  080047d4  00006108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080047d4  000061fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6d8  00000000  00000000  00006138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eef  00000000  00000000  00015810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00017700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b40  00000000  00000000  00018560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026915  00000000  00000000  000190a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dbe  00000000  00000000  0003f9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2245  00000000  00000000  00050773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001429b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c8c  00000000  00000000  001429fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00146688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800465c 	.word	0x0800465c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000010c 	.word	0x2000010c
 80001c4:	0800465c 	.word	0x0800465c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <App_Init>:

void playNote(float freq);
void stopNote(void);

void App_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
    // Initialize all 25 key GPIOs as input pull-up
    for (int i = 0; i < NUM_KEYS; i++) {
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
 80004c2:	e01b      	b.n	80004fc <App_Init+0x44>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
        GPIO_InitStruct.Pin = keyPins[i];
 80004d2:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <App_Init+0x5c>)
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004da:	603b      	str	r3, [r7, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004dc:	2300      	movs	r3, #0
 80004de:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
        HAL_GPIO_Init(keyPorts[i], &GPIO_InitStruct);
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <App_Init+0x60>)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ec:	463a      	mov	r2, r7
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fcf7 	bl	8000ee4 <HAL_GPIO_Init>
    for (int i = 0; i < NUM_KEYS; i++) {
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	2b18      	cmp	r3, #24
 8000500:	dde0      	ble.n	80004c4 <App_Init+0xc>
    }

    HAL_TIM_PWM_Start(&SPEAKER_TIMER, SPEAKER_CHANNEL);
 8000502:	2100      	movs	r1, #0
 8000504:	4805      	ldr	r0, [pc, #20]	@ (800051c <App_Init+0x64>)
 8000506:	f002 fa9f 	bl	8002a48 <HAL_TIM_PWM_Start>
}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000064 	.word	0x20000064
 8000518:	20000000 	.word	0x20000000
 800051c:	20000124 	.word	0x20000124

08000520 <App_MainLoop>:

void App_MainLoop(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
    bool keyPressed = false;
 8000526:	2300      	movs	r3, #0
 8000528:	71fb      	strb	r3, [r7, #7]

    for (int i = 0; i < NUM_KEYS; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	e01e      	b.n	800056e <App_MainLoop+0x4e>
        if (HAL_GPIO_ReadPin(keyPorts[i], keyPins[i]) == GPIO_PIN_RESET) {
 8000530:	4a16      	ldr	r2, [pc, #88]	@ (800058c <App_MainLoop+0x6c>)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000538:	4915      	ldr	r1, [pc, #84]	@ (8000590 <App_MainLoop+0x70>)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000540:	4619      	mov	r1, r3
 8000542:	4610      	mov	r0, r2
 8000544:	f000 fe78 	bl	8001238 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10c      	bne.n	8000568 <App_MainLoop+0x48>
            playNote(noteFreqs[i]);
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <App_MainLoop+0x74>)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	edd3 7a00 	vldr	s15, [r3]
 800055a:	eeb0 0a67 	vmov.f32	s0, s15
 800055e:	f000 f81b 	bl	8000598 <playNote>
            keyPressed = true;
 8000562:	2301      	movs	r3, #1
 8000564:	71fb      	strb	r3, [r7, #7]
            break;
 8000566:	e005      	b.n	8000574 <App_MainLoop+0x54>
    for (int i = 0; i < NUM_KEYS; i++) {
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b18      	cmp	r3, #24
 8000572:	dddd      	ble.n	8000530 <App_MainLoop+0x10>
        }
    }

    if (!keyPressed) {
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f083 0301 	eor.w	r3, r3, #1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <App_MainLoop+0x64>
        stopNote();
 8000580:	f000 f848 	bl	8000614 <stopNote>
    }
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000000 	.word	0x20000000
 8000590:	20000064 	.word	0x20000064
 8000594:	20000098 	.word	0x20000098

08000598 <playNote>:

void playNote(float freq)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (freq <= 0.0f) return;
 80005a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ae:	d92b      	bls.n	8000608 <playNote+0x70>

    uint32_t timerClock = HAL_RCC_GetPCLK2Freq() * 2; // For TIM1 on APB2
 80005b0:	f001 fc60 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 80005b4:	4603      	mov	r3, r0
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
    uint32_t period = (uint32_t)(timerClock / (freq * 2));
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	ee07 3a90 	vmov	s15, r3
 80005c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80005cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80005d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d8:	ee17 3a90 	vmov	r3, s15
 80005dc:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_PRESCALER(&SPEAKER_TIMER, prescaler);
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <playNote+0x78>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&SPEAKER_TIMER, period);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <playNote+0x78>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005ee:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <playNote+0x78>)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&SPEAKER_TIMER, SPEAKER_CHANNEL, period / 2);
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <playNote+0x78>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	0852      	lsrs	r2, r2, #1
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&SPEAKER_TIMER, SPEAKER_CHANNEL);
 80005fe:	2100      	movs	r1, #0
 8000600:	4803      	ldr	r0, [pc, #12]	@ (8000610 <playNote+0x78>)
 8000602:	f002 fa21 	bl	8002a48 <HAL_TIM_PWM_Start>
 8000606:	e000      	b.n	800060a <playNote+0x72>
    if (freq <= 0.0f) return;
 8000608:	bf00      	nop
}
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000124 	.word	0x20000124

08000614 <stopNote>:

void stopNote(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&SPEAKER_TIMER, SPEAKER_CHANNEL);
 8000618:	2100      	movs	r1, #0
 800061a:	4802      	ldr	r0, [pc, #8]	@ (8000624 <stopNote+0x10>)
 800061c:	f002 fb1a 	bl	8002c54 <HAL_TIM_PWM_Stop>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000124 	.word	0x20000124

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 faf8 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f80b 	bl	800064a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f936 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000638:	f000 f904 	bl	8000844 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800063c:	f000 f856 	bl	80006ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 8000640:	f7ff ff3a 	bl	80004b8 <App_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   App_MainLoop();
 8000644:	f7ff ff6c 	bl	8000520 <App_MainLoop>
 8000648:	e7fc      	b.n	8000644 <main+0x1c>

0800064a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b096      	sub	sp, #88	@ 0x58
 800064e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2244      	movs	r2, #68	@ 0x44
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f003 ffd2 	bl	8004602 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000670:	f000 fe20 	bl	80012b4 <HAL_PWREx_ControlVoltageScaling>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800067a:	f000 f987 	bl	800098c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000698:	230a      	movs	r3, #10
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069c:	2307      	movs	r3, #7
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fe57 	bl	8001360 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b8:	f000 f968 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2303      	movs	r3, #3
 80006c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	2104      	movs	r1, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fa1f 	bl	8001b18 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006e0:	f000 f954 	bl	800098c <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3758      	adds	r7, #88	@ 0x58
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09a      	sub	sp, #104	@ 0x68
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	222c      	movs	r2, #44	@ 0x2c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 ff6b 	bl	8004602 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072c:	4b43      	ldr	r3, [pc, #268]	@ (800083c <MX_TIM1_Init+0x150>)
 800072e:	4a44      	ldr	r2, [pc, #272]	@ (8000840 <MX_TIM1_Init+0x154>)
 8000730:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000732:	4b42      	ldr	r3, [pc, #264]	@ (800083c <MX_TIM1_Init+0x150>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b40      	ldr	r3, [pc, #256]	@ (800083c <MX_TIM1_Init+0x150>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800073e:	4b3f      	ldr	r3, [pc, #252]	@ (800083c <MX_TIM1_Init+0x150>)
 8000740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000744:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b3d      	ldr	r3, [pc, #244]	@ (800083c <MX_TIM1_Init+0x150>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074c:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <MX_TIM1_Init+0x150>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b3a      	ldr	r3, [pc, #232]	@ (800083c <MX_TIM1_Init+0x150>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000758:	4838      	ldr	r0, [pc, #224]	@ (800083c <MX_TIM1_Init+0x150>)
 800075a:	f002 f8bd 	bl	80028d8 <HAL_TIM_Base_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 f912 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800076e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000772:	4619      	mov	r1, r3
 8000774:	4831      	ldr	r0, [pc, #196]	@ (800083c <MX_TIM1_Init+0x150>)
 8000776:	f002 fc17 	bl	8002fa8 <HAL_TIM_ConfigClockSource>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000780:	f000 f904 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000784:	482d      	ldr	r0, [pc, #180]	@ (800083c <MX_TIM1_Init+0x150>)
 8000786:	f002 f8fe 	bl	8002986 <HAL_TIM_PWM_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000790:	f000 f8fc 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007a4:	4619      	mov	r1, r3
 80007a6:	4825      	ldr	r0, [pc, #148]	@ (800083c <MX_TIM1_Init+0x150>)
 80007a8:	f003 f904 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007b2:	f000 f8eb 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b6:	2360      	movs	r3, #96	@ 0x60
 80007b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007be:	2300      	movs	r3, #0
 80007c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	4818      	ldr	r0, [pc, #96]	@ (800083c <MX_TIM1_Init+0x150>)
 80007dc:	f002 fad0 	bl	8002d80 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007e6:	f000 f8d1 	bl	800098c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000802:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800080c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_TIM1_Init+0x150>)
 8000820:	f003 f950 	bl	8003ac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800082a:	f000 f8af 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082e:	4803      	ldr	r0, [pc, #12]	@ (800083c <MX_TIM1_Init+0x150>)
 8000830:	f000 f8f6 	bl	8000a20 <HAL_TIM_MspPostInit>

}
 8000834:	bf00      	nop
 8000836:	3768      	adds	r7, #104	@ 0x68
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000124 	.word	0x20000124
 8000840:	40012c00 	.word	0x40012c00

08000844 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_USART2_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000888:	f003 f99a 	bl	8003bc0 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f87b 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000170 	.word	0x20000170
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a31      	ldr	r2, [pc, #196]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b29      	ldr	r3, [pc, #164]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b26      	ldr	r3, [pc, #152]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a25      	ldr	r2, [pc, #148]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b23      	ldr	r3, [pc, #140]	@ (8000984 <MX_GPIO_Init+0xe0>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b20      	ldr	r3, [pc, #128]	@ (8000984 <MX_GPIO_Init+0xe0>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a1f      	ldr	r2, [pc, #124]	@ (8000984 <MX_GPIO_Init+0xe0>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <MX_GPIO_Init+0xe0>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f000 fca1 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4812      	ldr	r0, [pc, #72]	@ (8000988 <MX_GPIO_Init+0xe4>)
 800093e:	f000 fad1 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000942:	2303      	movs	r3, #3
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000958:	f000 fac4 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800095c:	2320      	movs	r3, #32
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000976:	f000 fab5 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	48000800 	.word	0x48000800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a2:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_TIM_Base_MspInit+0x38>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d10b      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_TIM_Base_MspInit+0x3c>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <HAL_TIM_Base_MspInit+0x3c>)
 80009f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <HAL_TIM_Base_MspInit+0x3c>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40012c00 	.word	0x40012c00
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <HAL_TIM_MspPostInit+0x68>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d11d      	bne.n	8000a7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <HAL_TIM_MspPostInit+0x6c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	4a11      	ldr	r2, [pc, #68]	@ (8000a8c <HAL_TIM_MspPostInit+0x6c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_TIM_MspPostInit+0x6c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f000 fa33 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40012c00 	.word	0x40012c00
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0ac      	sub	sp, #176	@ 0xb0
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2288      	movs	r2, #136	@ 0x88
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 fda6 	bl	8004602 <memset>
  if(huart->Instance==USART2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <HAL_UART_MspInit+0xb0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d13b      	bne.n	8000b38 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fa47 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad8:	f7ff ff58 	bl	800098c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <HAL_UART_MspInit+0xb4>)
 8000ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae0:	4a18      	ldr	r2, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0xb4>)
 8000ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <HAL_UART_MspInit+0xb4>)
 8000aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <HAL_UART_MspInit+0xb4>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af8:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <HAL_UART_MspInit+0xb4>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_UART_MspInit+0xb4>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b24:	2307      	movs	r3, #7
 8000b26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f000 f9d6 	bl	8000ee4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b38:	bf00      	nop
 8000b3a:	37b0      	adds	r7, #176	@ 0xb0
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40021000 	.word	0x40021000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 f89b 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f003 fd0b 	bl	8004614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfe:	f7ff fd13 	bl	8000628 <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000c10:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 8000c14:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000c18:	200001fc 	.word	0x200001fc

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_Init+0x3c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <HAL_Init+0x3c>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 f920 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f80f 	bl	8000c60 <HAL_InitTick>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	e001      	b.n	8000c52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4e:	f7ff fea3 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d023      	beq.n	8000cbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_InitTick+0x70>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f91d 	bl	8000eca <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10f      	bne.n	8000cb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d809      	bhi.n	8000cb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f8f5 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_InitTick+0x74>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e007      	b.n	8000cc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e004      	b.n	8000cc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e001      	b.n	8000cc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000104 	.word	0x20000104
 8000cd0:	200000fc 	.word	0x200000fc
 8000cd4:	20000100 	.word	0x20000100

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000104 	.word	0x20000104
 8000cfc:	200001f8 	.word	0x200001f8

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200001f8 	.word	0x200001f8

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e17f      	b.n	80011f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8171 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_Init+0x40>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d118      	bne.n	8000fc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ac 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <HAL_GPIO_Init+0x330>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a5e      	ldr	r2, [pc, #376]	@ (8001214 <HAL_GPIO_Init+0x330>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001214 <HAL_GPIO_Init+0x330>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001218 <HAL_GPIO_Init+0x334>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x242>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001220 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x22a>
 800110a:	2306      	movs	r3, #6
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800110e:	2307      	movs	r3, #7
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001126:	2300      	movs	r3, #0
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001138:	4937      	ldr	r1, [pc, #220]	@ (8001218 <HAL_GPIO_Init+0x334>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001146:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae78 	bne.w	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	48001000 	.word	0x48001000
 800122c:	48001400 	.word	0x48001400
 8001230:	48001800 	.word	0x48001800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e001      	b.n	800125a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001284:	e002      	b.n	800128c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40007000 	.word	0x40007000

080012b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c2:	d130      	bne.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d0:	d038      	beq.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d2:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012da:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2232      	movs	r2, #50	@ 0x32
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0c9b      	lsrs	r3, r3, #18
 80012f4:	3301      	adds	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f8:	e002      	b.n	8001300 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800130c:	d102      	bne.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x60>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f2      	bne.n	80012fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800131c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001320:	d110      	bne.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e00f      	b.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800132e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001332:	d007      	beq.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800133c:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001342:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40007000 	.word	0x40007000
 8001358:	200000fc 	.word	0x200000fc
 800135c:	431bde83 	.word	0x431bde83

08001360 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e3ca      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001372:	4b97      	ldr	r3, [pc, #604]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800137c:	4b94      	ldr	r3, [pc, #592]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80e4 	beq.w	800155c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <HAL_RCC_OscConfig+0x4a>
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	f040 808b 	bne.w	80014b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	f040 8087 	bne.w	80014b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013aa:	4b89      	ldr	r3, [pc, #548]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_OscConfig+0x62>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e3a2      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	4b82      	ldr	r3, [pc, #520]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <HAL_RCC_OscConfig+0x7c>
 80013d2:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013da:	e005      	b.n	80013e8 <HAL_RCC_OscConfig+0x88>
 80013dc:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80013de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d223      	bcs.n	8001434 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fd55 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e383      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001400:	4b73      	ldr	r3, [pc, #460]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a72      	ldr	r2, [pc, #456]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b70      	ldr	r3, [pc, #448]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	496d      	ldr	r1, [pc, #436]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800141e:	4b6c      	ldr	r3, [pc, #432]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	4968      	ldr	r1, [pc, #416]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
 8001432:	e025      	b.n	8001480 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001434:	4b66      	ldr	r3, [pc, #408]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a65      	ldr	r2, [pc, #404]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b63      	ldr	r3, [pc, #396]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4960      	ldr	r1, [pc, #384]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001452:	4b5f      	ldr	r3, [pc, #380]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	495b      	ldr	r1, [pc, #364]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001462:	4313      	orrs	r3, r2
 8001464:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d109      	bne.n	8001480 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fd15 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e343      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001480:	f000 fc4a 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b52      	ldr	r3, [pc, #328]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	4950      	ldr	r1, [pc, #320]	@ (80015d4 <HAL_RCC_OscConfig+0x274>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	4a4e      	ldr	r2, [pc, #312]	@ (80015d8 <HAL_RCC_OscConfig+0x278>)
 800149e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014a0:	4b4e      	ldr	r3, [pc, #312]	@ (80015dc <HAL_RCC_OscConfig+0x27c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fbdb 	bl	8000c60 <HAL_InitTick>
 80014aa:	4603      	mov	r3, r0
 80014ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d052      	beq.n	800155a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	e327      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d032      	beq.n	8001526 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014c0:	4b43      	ldr	r3, [pc, #268]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a42      	ldr	r2, [pc, #264]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fc18 	bl	8000d00 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d4:	f7ff fc14 	bl	8000d00 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e310      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e6:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f2:	4b37      	ldr	r3, [pc, #220]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a36      	ldr	r2, [pc, #216]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4931      	ldr	r1, [pc, #196]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001510:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	492c      	ldr	r1, [pc, #176]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
 8001524:	e01a      	b.n	800155c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a29      	ldr	r2, [pc, #164]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001532:	f7ff fbe5 	bl	8000d00 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800153a:	f7ff fbe1 	bl	8000d00 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e2dd      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x1da>
 8001558:	e000      	b.n	800155c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800155a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d074      	beq.n	8001652 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x21a>
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d10e      	bne.n	8001592 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d10b      	bne.n	8001592 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d064      	beq.n	8001650 <HAL_RCC_OscConfig+0x2f0>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d160      	bne.n	8001650 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e2ba      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x24a>
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e026      	b.n	80015f8 <HAL_RCC_OscConfig+0x298>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015b2:	d115      	bne.n	80015e0 <HAL_RCC_OscConfig+0x280>
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80015ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a02      	ldr	r2, [pc, #8]	@ (80015d0 <HAL_RCC_OscConfig+0x270>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e014      	b.n	80015f8 <HAL_RCC_OscConfig+0x298>
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08004674 	.word	0x08004674
 80015d8:	200000fc 	.word	0x200000fc
 80015dc:	20000100 	.word	0x20000100
 80015e0:	4ba0      	ldr	r3, [pc, #640]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a9f      	ldr	r2, [pc, #636]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a9c      	ldr	r2, [pc, #624]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fb7e 	bl	8000d00 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fb7a 	bl	8000d00 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	@ 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e276      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161a:	4b92      	ldr	r3, [pc, #584]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x2a8>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fb6a 	bl	8000d00 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fb66 	bl	8000d00 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	@ 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e262      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001642:	4b88      	ldr	r3, [pc, #544]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x2d0>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d060      	beq.n	8001720 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x310>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b0c      	cmp	r3, #12
 8001668:	d119      	bne.n	800169e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d116      	bne.n	800169e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001670:	4b7c      	ldr	r3, [pc, #496]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_OscConfig+0x328>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e23f      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b76      	ldr	r3, [pc, #472]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	061b      	lsls	r3, r3, #24
 8001696:	4973      	ldr	r1, [pc, #460]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800169c:	e040      	b.n	8001720 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d023      	beq.n	80016ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb25 	bl	8000d00 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ba:	f7ff fb21 	bl	8000d00 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e21d      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016cc:	4b65      	ldr	r3, [pc, #404]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b62      	ldr	r3, [pc, #392]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	495f      	ldr	r1, [pc, #380]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
 80016ec:	e018      	b.n	8001720 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb01 	bl	8000d00 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fafd 	bl	8000d00 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1f9      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001714:	4b53      	ldr	r3, [pc, #332]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d03c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01c      	beq.n	800176e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001734:	4b4b      	ldr	r3, [pc, #300]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173a:	4a4a      	ldr	r2, [pc, #296]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fadc 	bl	8000d00 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fad8 	bl	8000d00 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1d4      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800175e:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0ef      	beq.n	800174c <HAL_RCC_OscConfig+0x3ec>
 800176c:	e01b      	b.n	80017a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176e:	4b3d      	ldr	r3, [pc, #244]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001774:	4a3b      	ldr	r2, [pc, #236]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff fabf 	bl	8000d00 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff fabb 	bl	8000d00 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e1b7      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001798:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ef      	bne.n	8001786 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 80a6 	beq.w	8001900 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10d      	bne.n	80017e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	4a26      	ldr	r2, [pc, #152]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017dc:	2301      	movs	r3, #1
 80017de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_RCC_OscConfig+0x508>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d118      	bne.n	800181e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <HAL_RCC_OscConfig+0x508>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <HAL_RCC_OscConfig+0x508>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fa82 	bl	8000d00 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001800:	f7ff fa7e 	bl	8000d00 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e17a      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_RCC_OscConfig+0x508>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d108      	bne.n	8001838 <HAL_RCC_OscConfig+0x4d8>
 8001826:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001836:	e029      	b.n	800188c <HAL_RCC_OscConfig+0x52c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d115      	bne.n	800186c <HAL_RCC_OscConfig+0x50c>
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001846:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001856:	4a03      	ldr	r2, [pc, #12]	@ (8001864 <HAL_RCC_OscConfig+0x504>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001860:	e014      	b.n	800188c <HAL_RCC_OscConfig+0x52c>
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
 800186c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001872:	4a9b      	ldr	r2, [pc, #620]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800187c:	4b98      	ldr	r3, [pc, #608]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 800187e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001882:	4a97      	ldr	r2, [pc, #604]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d016      	beq.n	80018c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff fa34 	bl	8000d00 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fa30 	bl	8000d00 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e12a      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ed      	beq.n	800189c <HAL_RCC_OscConfig+0x53c>
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff fa1d 	bl	8000d00 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff fa19 	bl	8000d00 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e113      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ed      	bne.n	80018ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	4a79      	ldr	r2, [pc, #484]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 80018fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80fe 	beq.w	8001b06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190e:	2b02      	cmp	r3, #2
 8001910:	f040 80d0 	bne.w	8001ab4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001914:	4b72      	ldr	r3, [pc, #456]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001924:	429a      	cmp	r2, r3
 8001926:	d130      	bne.n	800198a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	3b01      	subs	r3, #1
 8001934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d127      	bne.n	800198a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001944:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d11f      	bne.n	800198a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001954:	2a07      	cmp	r2, #7
 8001956:	bf14      	ite	ne
 8001958:	2201      	movne	r2, #1
 800195a:	2200      	moveq	r2, #0
 800195c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195e:	4293      	cmp	r3, r2
 8001960:	d113      	bne.n	800198a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	3b01      	subs	r3, #1
 8001970:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d109      	bne.n	800198a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	3b01      	subs	r3, #1
 8001984:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d06e      	beq.n	8001a68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b0c      	cmp	r3, #12
 800198e:	d069      	beq.n	8001a64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001990:	4b53      	ldr	r3, [pc, #332]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800199c:	4b50      	ldr	r3, [pc, #320]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0ad      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ac:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 80019b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b8:	f7ff f9a2 	bl	8000d00 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f99e 	bl	8000d00 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e09a      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d2:	4b43      	ldr	r3, [pc, #268]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019de:	4b40      	ldr	r3, [pc, #256]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	4b40      	ldr	r3, [pc, #256]	@ (8001ae4 <HAL_RCC_OscConfig+0x784>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019ee:	3a01      	subs	r2, #1
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	4311      	orrs	r1, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019f8:	0212      	lsls	r2, r2, #8
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a00:	0852      	lsrs	r2, r2, #1
 8001a02:	3a01      	subs	r2, #1
 8001a04:	0552      	lsls	r2, r2, #21
 8001a06:	4311      	orrs	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a0c:	0852      	lsrs	r2, r2, #1
 8001a0e:	3a01      	subs	r2, #1
 8001a10:	0652      	lsls	r2, r2, #25
 8001a12:	4311      	orrs	r1, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a18:	0912      	lsrs	r2, r2, #4
 8001a1a:	0452      	lsls	r2, r2, #17
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4930      	ldr	r1, [pc, #192]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a3c:	f7ff f960 	bl	8000d00 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f95c 	bl	8000d00 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e058      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a62:	e050      	b.n	8001b06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e04f      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d148      	bne.n	8001b06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a19      	ldr	r2, [pc, #100]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a80:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4a16      	ldr	r2, [pc, #88]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a8c:	f7ff f938 	bl	8000d00 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f934 	bl	8000d00 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e030      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x734>
 8001ab2:	e028      	b.n	8001b06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d023      	beq.n	8001b02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <HAL_RCC_OscConfig+0x780>)
 8001ac0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f91b 	bl	8000d00 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001acc:	e00c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff f917 	bl	8000d00 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d905      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e013      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_RCC_OscConfig+0x7b0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ec      	bne.n	8001ace <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_RCC_OscConfig+0x7b0>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4905      	ldr	r1, [pc, #20]	@ (8001b10 <HAL_RCC_OscConfig+0x7b0>)
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_RCC_OscConfig+0x7b4>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e001      	b.n	8001b06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	feeefffc 	.word	0xfeeefffc

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0e7      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b75      	ldr	r3, [pc, #468]	@ (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b72      	ldr	r3, [pc, #456]	@ (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4970      	ldr	r1, [pc, #448]	@ (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0cf      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b66      	ldr	r3, [pc, #408]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d908      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b78:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4960      	ldr	r1, [pc, #384]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d04c      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d121      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0a6      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb6:	4b54      	ldr	r3, [pc, #336]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d115      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e09a      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bce:	4b4e      	ldr	r3, [pc, #312]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bde:	4b4a      	ldr	r3, [pc, #296]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e086      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b46      	ldr	r3, [pc, #280]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4943      	ldr	r1, [pc, #268]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c00:	f7ff f87e 	bl	8000d00 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7ff f87a 	bl	8000d00 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e06e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d208      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	492b      	ldr	r1, [pc, #172]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5e:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d210      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6c:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 0207 	bic.w	r2, r3, #7
 8001c74:	4923      	ldr	r1, [pc, #140]	@ (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7c:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e036      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4918      	ldr	r1, [pc, #96]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4910      	ldr	r1, [pc, #64]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ccc:	f000 f824 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	490b      	ldr	r1, [pc, #44]	@ (8001d0c <HAL_RCC_ClockConfig+0x1f4>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cec:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1fc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe ffb5 	bl	8000c60 <HAL_InitTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08004674 	.word	0x08004674
 8001d10:	200000fc 	.word	0x200000fc
 8001d14:	20000100 	.word	0x20000100

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	4b3e      	ldr	r3, [pc, #248]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d30:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x34>
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d121      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d11e      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d58:	4b31      	ldr	r3, [pc, #196]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e005      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d74:	4a2b      	ldr	r2, [pc, #172]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d90:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	e004      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d134      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d003      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001dbc:	e005      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc0:	617b      	str	r3, [r7, #20]
      break;
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc6:	617b      	str	r3, [r7, #20]
      break;
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	617b      	str	r3, [r7, #20]
      break;
 8001dce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	3301      	adds	r3, #1
 8001ddc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	fb03 f202 	mul.w	r2, r3, r2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	0e5b      	lsrs	r3, r3, #25
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	3301      	adds	r3, #1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e10:	69bb      	ldr	r3, [r7, #24]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	@ 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	0800468c 	.word	0x0800468c
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200

08001e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b03      	ldr	r3, [pc, #12]	@ (8001e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200000fc 	.word	0x200000fc

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e4c:	f7ff fff0 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4904      	ldr	r1, [pc, #16]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08004684 	.word	0x08004684

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e78:	f7ff ffda 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0adb      	lsrs	r3, r3, #11
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4904      	ldr	r1, [pc, #16]	@ (8001e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08004684 	.word	0x08004684

08001ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eac:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eb8:	f7ff f9ee 	bl	8001298 <HAL_PWREx_GetVoltageRange>
 8001ebc:	6178      	str	r0, [r7, #20]
 8001ebe:	e014      	b.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	4a24      	ldr	r2, [pc, #144]	@ (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ed8:	f7ff f9de 	bl	8001298 <HAL_PWREx_GetVoltageRange>
 8001edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ef0:	d10b      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	@ 0x80
 8001ef6:	d919      	bls.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2ba0      	cmp	r3, #160	@ 0xa0
 8001efc:	d902      	bls.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001efe:	2302      	movs	r3, #2
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e013      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f04:	2301      	movs	r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e010      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b80      	cmp	r3, #128	@ 0x80
 8001f0e:	d902      	bls.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f10:	2303      	movs	r3, #3
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	e00a      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b80      	cmp	r3, #128	@ 0x80
 8001f1a:	d102      	bne.n	8001f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	e004      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b70      	cmp	r3, #112	@ 0x70
 8001f26:	d101      	bne.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f28:	2301      	movs	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 0207 	bic.w	r2, r3, #7
 8001f34:	4909      	ldr	r1, [pc, #36]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f3c:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40022000 	.word	0x40022000

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f68:	2300      	movs	r3, #0
 8001f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d041      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f84:	d02a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f8a:	d824      	bhi.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f96:	d81e      	bhi.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fa2:	e018      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa4:	4b86      	ldr	r3, [pc, #536]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a85      	ldr	r2, [pc, #532]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb0:	e015      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fabb 	bl	8002534 <RCCEx_PLLSAI1_Config>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc2:	e00c      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3320      	adds	r3, #32
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fba6 	bl	800271c <RCCEx_PLLSAI2_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fd4:	e003      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fda:	e000      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fe4:	4b76      	ldr	r3, [pc, #472]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ff2:	4973      	ldr	r1, [pc, #460]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ffa:	e001      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d041      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002010:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002014:	d02a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002016:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800201a:	d824      	bhi.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800201c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002020:	d008      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002026:	d81e      	bhi.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002030:	d010      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002032:	e018      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002034:	4b62      	ldr	r3, [pc, #392]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a61      	ldr	r2, [pc, #388]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002040:	e015      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fa73 	bl	8002534 <RCCEx_PLLSAI1_Config>
 800204e:	4603      	mov	r3, r0
 8002050:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002052:	e00c      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3320      	adds	r3, #32
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fb5e 	bl	800271c <RCCEx_PLLSAI2_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002064:	e003      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	74fb      	strb	r3, [r7, #19]
      break;
 800206a:	e000      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800206c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002074:	4b52      	ldr	r3, [pc, #328]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002082:	494f      	ldr	r1, [pc, #316]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800208a:	e001      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a0 	beq.w	80021de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020a2:	4b47      	ldr	r3, [pc, #284]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00d      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b41      	ldr	r3, [pc, #260]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020bc:	4a40      	ldr	r2, [pc, #256]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020c4:	4b3e      	ldr	r3, [pc, #248]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d4:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3a      	ldr	r2, [pc, #232]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e0:	f7fe fe0e 	bl	8000d00 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020e6:	e009      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e8:	f7fe fe0a 	bl	8000d00 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d902      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	74fb      	strb	r3, [r7, #19]
        break;
 80020fa:	e005      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020fc:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ef      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d15c      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800210e:	4b2c      	ldr	r3, [pc, #176]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002118:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01f      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	d019      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800212c:	4b24      	ldr	r3, [pc, #144]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002138:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213e:	4a20      	ldr	r2, [pc, #128]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002148:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214e:	4a1c      	ldr	r2, [pc, #112]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe fdc9 	bl	8000d00 <HAL_GetTick>
 800216e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002170:	e00b      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fdc5 	bl	8000d00 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d902      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	74fb      	strb	r3, [r7, #19]
            break;
 8002188:	e006      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218a:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ec      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800219e:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ae:	4904      	ldr	r1, [pc, #16]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021b6:	e009      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
 80021bc:	e006      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021cc:	7c7b      	ldrb	r3, [r7, #17]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b9e      	ldr	r3, [pc, #632]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	4a9d      	ldr	r2, [pc, #628]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ea:	4b98      	ldr	r3, [pc, #608]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f023 0203 	bic.w	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f8:	4994      	ldr	r1, [pc, #592]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800220c:	4b8f      	ldr	r3, [pc, #572]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 020c 	bic.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221a:	498c      	ldr	r1, [pc, #560]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800222e:	4b87      	ldr	r3, [pc, #540]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	4983      	ldr	r1, [pc, #524]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002250:	4b7e      	ldr	r3, [pc, #504]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	497b      	ldr	r1, [pc, #492]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002272:	4b76      	ldr	r3, [pc, #472]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002280:	4972      	ldr	r1, [pc, #456]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002294:	4b6d      	ldr	r3, [pc, #436]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	496a      	ldr	r1, [pc, #424]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022b6:	4b65      	ldr	r3, [pc, #404]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c4:	4961      	ldr	r1, [pc, #388]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022d8:	4b5c      	ldr	r3, [pc, #368]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	4959      	ldr	r1, [pc, #356]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022fa:	4b54      	ldr	r3, [pc, #336]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002300:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002308:	4950      	ldr	r1, [pc, #320]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800231c:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	4948      	ldr	r1, [pc, #288]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800233e:	4b43      	ldr	r3, [pc, #268]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002344:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234c:	493f      	ldr	r1, [pc, #252]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d028      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002360:	4b3a      	ldr	r3, [pc, #232]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002366:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800236e:	4937      	ldr	r1, [pc, #220]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800237a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800237e:	d106      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a31      	ldr	r2, [pc, #196]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238a:	60d3      	str	r3, [r2, #12]
 800238c:	e011      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002392:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002396:	d10c      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f8c8 	bl	8002534 <RCCEx_PLLSAI1_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d028      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023be:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023cc:	491f      	ldr	r1, [pc, #124]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023dc:	d106      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023de:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023e8:	60d3      	str	r3, [r2, #12]
 80023ea:	e011      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2101      	movs	r1, #1
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f899 	bl	8002534 <RCCEx_PLLSAI1_Config>
 8002402:	4603      	mov	r3, r0
 8002404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d02b      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242a:	4908      	ldr	r1, [pc, #32]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800243a:	d109      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a02      	ldr	r2, [pc, #8]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002446:	60d3      	str	r3, [r2, #12]
 8002448:	e014      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002454:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002458:	d10c      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	2101      	movs	r1, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f867 	bl	8002534 <RCCEx_PLLSAI1_Config>
 8002466:	4603      	mov	r3, r0
 8002468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246a:	7cfb      	ldrb	r3, [r7, #19]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d02f      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002480:	4b2b      	ldr	r3, [pc, #172]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002486:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800248e:	4928      	ldr	r1, [pc, #160]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800249a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800249e:	d10d      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3304      	adds	r3, #4
 80024a4:	2102      	movs	r1, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f844 	bl	8002534 <RCCEx_PLLSAI1_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d014      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	74bb      	strb	r3, [r7, #18]
 80024ba:	e011      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3320      	adds	r3, #32
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f925 	bl	800271c <RCCEx_PLLSAI2_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024ec:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024fa:	490d      	ldr	r1, [pc, #52]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002514:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800251e:	4904      	ldr	r1, [pc, #16]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002526:	7cbb      	ldrb	r3, [r7, #18]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000

08002534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002542:	4b75      	ldr	r3, [pc, #468]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d018      	beq.n	8002580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800254e:	4b72      	ldr	r3, [pc, #456]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0203 	and.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d10d      	bne.n	800257a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
       ||
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002566:	4b6c      	ldr	r3, [pc, #432]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
       ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d047      	beq.n	800260a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e044      	b.n	800260a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d018      	beq.n	80025ba <RCCEx_PLLSAI1_Config+0x86>
 8002588:	2b03      	cmp	r3, #3
 800258a:	d825      	bhi.n	80025d8 <RCCEx_PLLSAI1_Config+0xa4>
 800258c:	2b01      	cmp	r3, #1
 800258e:	d002      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0x62>
 8002590:	2b02      	cmp	r3, #2
 8002592:	d009      	beq.n	80025a8 <RCCEx_PLLSAI1_Config+0x74>
 8002594:	e020      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002596:	4b60      	ldr	r3, [pc, #384]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11d      	bne.n	80025de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a6:	e01a      	b.n	80025de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d116      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b8:	e013      	b.n	80025e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ba:	4b57      	ldr	r3, [pc, #348]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025c6:	4b54      	ldr	r3, [pc, #336]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025d6:	e006      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e004      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	430b      	orrs	r3, r1
 8002604:	4944      	ldr	r1, [pc, #272]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d17d      	bne.n	800270c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002610:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a40      	ldr	r2, [pc, #256]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800261a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261c:	f7fe fb70 	bl	8000d00 <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002622:	e009      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002624:	f7fe fb6c 	bl	8000d00 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d902      	bls.n	8002638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	73fb      	strb	r3, [r7, #15]
        break;
 8002636:	e005      	b.n	8002644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002638:	4b37      	ldr	r3, [pc, #220]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ef      	bne.n	8002624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d160      	bne.n	800270c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d111      	bne.n	8002674 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002650:	4b31      	ldr	r3, [pc, #196]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6892      	ldr	r2, [r2, #8]
 8002660:	0211      	lsls	r1, r2, #8
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	0912      	lsrs	r2, r2, #4
 8002668:	0452      	lsls	r2, r2, #17
 800266a:	430a      	orrs	r2, r1
 800266c:	492a      	ldr	r1, [pc, #168]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	610b      	str	r3, [r1, #16]
 8002672:	e027      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d112      	bne.n	80026a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267a:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002682:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6892      	ldr	r2, [r2, #8]
 800268a:	0211      	lsls	r1, r2, #8
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6912      	ldr	r2, [r2, #16]
 8002690:	0852      	lsrs	r2, r2, #1
 8002692:	3a01      	subs	r2, #1
 8002694:	0552      	lsls	r2, r2, #21
 8002696:	430a      	orrs	r2, r1
 8002698:	491f      	ldr	r1, [pc, #124]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	610b      	str	r3, [r1, #16]
 800269e:	e011      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6892      	ldr	r2, [r2, #8]
 80026b0:	0211      	lsls	r1, r2, #8
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6952      	ldr	r2, [r2, #20]
 80026b6:	0852      	lsrs	r2, r2, #1
 80026b8:	3a01      	subs	r2, #1
 80026ba:	0652      	lsls	r2, r2, #25
 80026bc:	430a      	orrs	r2, r1
 80026be:	4916      	ldr	r1, [pc, #88]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026c4:	4b14      	ldr	r3, [pc, #80]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe fb16 	bl	8000d00 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d6:	e009      	b.n	80026ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d8:	f7fe fb12 	bl	8000d00 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d902      	bls.n	80026ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	73fb      	strb	r3, [r7, #15]
          break;
 80026ea:	e005      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ef      	beq.n	80026d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	4904      	ldr	r1, [pc, #16]	@ (8002718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000

0800271c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800272a:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d018      	beq.n	8002768 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002736:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0203 	and.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d10d      	bne.n	8002762 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
       ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800274e:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
       ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d047      	beq.n	80027f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e044      	b.n	80027f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d018      	beq.n	80027a2 <RCCEx_PLLSAI2_Config+0x86>
 8002770:	2b03      	cmp	r3, #3
 8002772:	d825      	bhi.n	80027c0 <RCCEx_PLLSAI2_Config+0xa4>
 8002774:	2b01      	cmp	r3, #1
 8002776:	d002      	beq.n	800277e <RCCEx_PLLSAI2_Config+0x62>
 8002778:	2b02      	cmp	r3, #2
 800277a:	d009      	beq.n	8002790 <RCCEx_PLLSAI2_Config+0x74>
 800277c:	e020      	b.n	80027c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800277e:	4b55      	ldr	r3, [pc, #340]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d11d      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278e:	e01a      	b.n	80027c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002790:	4b50      	ldr	r3, [pc, #320]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d116      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a0:	e013      	b.n	80027ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027a2:	4b4c      	ldr	r3, [pc, #304]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ae:	4b49      	ldr	r3, [pc, #292]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027be:	e006      	b.n	80027ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e004      	b.n	80027d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c6:	bf00      	nop
 80027c8:	e002      	b.n	80027d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10d      	bne.n	80027f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027d6:	4b3f      	ldr	r3, [pc, #252]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6819      	ldr	r1, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	430b      	orrs	r3, r1
 80027ec:	4939      	ldr	r1, [pc, #228]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d167      	bne.n	80028c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027f8:	4b36      	ldr	r3, [pc, #216]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a35      	ldr	r2, [pc, #212]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe fa7c 	bl	8000d00 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800280a:	e009      	b.n	8002820 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800280c:	f7fe fa78 	bl	8000d00 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	73fb      	strb	r3, [r7, #15]
        break;
 800281e:	e005      	b.n	800282c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002820:	4b2c      	ldr	r3, [pc, #176]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ef      	bne.n	800280c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d14a      	bne.n	80028c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d111      	bne.n	800285c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002838:	4b26      	ldr	r3, [pc, #152]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	0211      	lsls	r1, r2, #8
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	0912      	lsrs	r2, r2, #4
 8002850:	0452      	lsls	r2, r2, #17
 8002852:	430a      	orrs	r2, r1
 8002854:	491f      	ldr	r1, [pc, #124]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	4313      	orrs	r3, r2
 8002858:	614b      	str	r3, [r1, #20]
 800285a:	e011      	b.n	8002880 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800285c:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002864:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6892      	ldr	r2, [r2, #8]
 800286c:	0211      	lsls	r1, r2, #8
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6912      	ldr	r2, [r2, #16]
 8002872:	0852      	lsrs	r2, r2, #1
 8002874:	3a01      	subs	r2, #1
 8002876:	0652      	lsls	r2, r2, #25
 8002878:	430a      	orrs	r2, r1
 800287a:	4916      	ldr	r1, [pc, #88]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	4313      	orrs	r3, r2
 800287e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002880:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a13      	ldr	r2, [pc, #76]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800288a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe fa38 	bl	8000d00 <HAL_GetTick>
 8002890:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002892:	e009      	b.n	80028a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002894:	f7fe fa34 	bl	8000d00 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	73fb      	strb	r3, [r7, #15]
          break;
 80028a6:	e005      	b.n	80028b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028a8:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ef      	beq.n	8002894 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4904      	ldr	r1, [pc, #16]	@ (80028d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000

080028d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e049      	b.n	800297e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f86e 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f000 fc10 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e049      	b.n	8002a2c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f841 	bl	8002a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f000 fbb9 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_TIM_PWM_Start+0x24>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e03c      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x9e>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d109      	bne.n	8002a86 <HAL_TIM_PWM_Start+0x3e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	e02f      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x9e>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d109      	bne.n	8002aa0 <HAL_TIM_PWM_Start+0x58>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e022      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x9e>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d109      	bne.n	8002aba <HAL_TIM_PWM_Start+0x72>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e015      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x9e>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d109      	bne.n	8002ad4 <HAL_TIM_PWM_Start+0x8c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e008      	b.n	8002ae6 <HAL_TIM_PWM_Start+0x9e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e09c      	b.n	8002c28 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_PWM_Start+0xb6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002afc:	e023      	b.n	8002b46 <HAL_TIM_PWM_Start+0xfe>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start+0xc6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b0c:	e01b      	b.n	8002b46 <HAL_TIM_PWM_Start+0xfe>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_PWM_Start+0xd6>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b1c:	e013      	b.n	8002b46 <HAL_TIM_PWM_Start+0xfe>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d104      	bne.n	8002b2e <HAL_TIM_PWM_Start+0xe6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b2c:	e00b      	b.n	8002b46 <HAL_TIM_PWM_Start+0xfe>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d104      	bne.n	8002b3e <HAL_TIM_PWM_Start+0xf6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b3c:	e003      	b.n	8002b46 <HAL_TIM_PWM_Start+0xfe>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 ff0a 	bl	8003968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a35      	ldr	r2, [pc, #212]	@ (8002c30 <HAL_TIM_PWM_Start+0x1e8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x13e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a34      	ldr	r2, [pc, #208]	@ (8002c34 <HAL_TIM_PWM_Start+0x1ec>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x13e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a32      	ldr	r2, [pc, #200]	@ (8002c38 <HAL_TIM_PWM_Start+0x1f0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x13e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a31      	ldr	r2, [pc, #196]	@ (8002c3c <HAL_TIM_PWM_Start+0x1f4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x13e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2f      	ldr	r2, [pc, #188]	@ (8002c40 <HAL_TIM_PWM_Start+0x1f8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_PWM_Start+0x142>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_TIM_PWM_Start+0x144>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a22      	ldr	r2, [pc, #136]	@ (8002c30 <HAL_TIM_PWM_Start+0x1e8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01d      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x19e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb2:	d018      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x19e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a22      	ldr	r2, [pc, #136]	@ (8002c44 <HAL_TIM_PWM_Start+0x1fc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x19e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a21      	ldr	r2, [pc, #132]	@ (8002c48 <HAL_TIM_PWM_Start+0x200>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00e      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x19e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <HAL_TIM_PWM_Start+0x204>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x19e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a17      	ldr	r2, [pc, #92]	@ (8002c34 <HAL_TIM_PWM_Start+0x1ec>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x19e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a15      	ldr	r2, [pc, #84]	@ (8002c38 <HAL_TIM_PWM_Start+0x1f0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d115      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_TIM_PWM_Start+0x208>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b06      	cmp	r3, #6
 8002bf6:	d015      	beq.n	8002c24 <HAL_TIM_PWM_Start+0x1dc>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfe:	d011      	beq.n	8002c24 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c10:	e008      	b.n	8002c24 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e000      	b.n	8002c26 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40013400 	.word	0x40013400
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40014400 	.word	0x40014400
 8002c40:	40014800 	.word	0x40014800
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	40000c00 	.word	0x40000c00
 8002c50:	00010007 	.word	0x00010007

08002c54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	6839      	ldr	r1, [r7, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fe7e 	bl	8003968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3e      	ldr	r2, [pc, #248]	@ (8002d6c <HAL_TIM_PWM_Stop+0x118>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_TIM_PWM_Stop+0x4a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d70 <HAL_TIM_PWM_Stop+0x11c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00e      	beq.n	8002c9e <HAL_TIM_PWM_Stop+0x4a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3b      	ldr	r2, [pc, #236]	@ (8002d74 <HAL_TIM_PWM_Stop+0x120>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_TIM_PWM_Stop+0x4a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d78 <HAL_TIM_PWM_Stop+0x124>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_TIM_PWM_Stop+0x4a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a38      	ldr	r2, [pc, #224]	@ (8002d7c <HAL_TIM_PWM_Stop+0x128>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PWM_Stop+0x4e>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_TIM_PWM_Stop+0x50>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_TIM_PWM_Stop+0x84>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_PWM_Stop+0x84>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10f      	bne.n	8002d08 <HAL_TIM_PWM_Stop+0xb4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a1a      	ldr	r2, [r3, #32]
 8002cee:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_PWM_Stop+0xb4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_TIM_PWM_Stop+0xc4>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d16:	e023      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d104      	bne.n	8002d28 <HAL_TIM_PWM_Stop+0xd4>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d26:	e01b      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d104      	bne.n	8002d38 <HAL_TIM_PWM_Stop+0xe4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d36:	e013      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d104      	bne.n	8002d48 <HAL_TIM_PWM_Stop+0xf4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d46:	e00b      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d104      	bne.n	8002d58 <HAL_TIM_PWM_Stop+0x104>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d56:	e003      	b.n	8002d60 <HAL_TIM_PWM_Stop+0x10c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40013400 	.word	0x40013400
 8002d74:	40014000 	.word	0x40014000
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e0ff      	b.n	8002f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b14      	cmp	r3, #20
 8002daa:	f200 80f0 	bhi.w	8002f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002dae:	a201      	add	r2, pc, #4	@ (adr r2, 8002db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002e09 	.word	0x08002e09
 8002db8:	08002f8f 	.word	0x08002f8f
 8002dbc:	08002f8f 	.word	0x08002f8f
 8002dc0:	08002f8f 	.word	0x08002f8f
 8002dc4:	08002e49 	.word	0x08002e49
 8002dc8:	08002f8f 	.word	0x08002f8f
 8002dcc:	08002f8f 	.word	0x08002f8f
 8002dd0:	08002f8f 	.word	0x08002f8f
 8002dd4:	08002e8b 	.word	0x08002e8b
 8002dd8:	08002f8f 	.word	0x08002f8f
 8002ddc:	08002f8f 	.word	0x08002f8f
 8002de0:	08002f8f 	.word	0x08002f8f
 8002de4:	08002ecb 	.word	0x08002ecb
 8002de8:	08002f8f 	.word	0x08002f8f
 8002dec:	08002f8f 	.word	0x08002f8f
 8002df0:	08002f8f 	.word	0x08002f8f
 8002df4:	08002f0d 	.word	0x08002f0d
 8002df8:	08002f8f 	.word	0x08002f8f
 8002dfc:	08002f8f 	.word	0x08002f8f
 8002e00:	08002f8f 	.word	0x08002f8f
 8002e04:	08002f4d 	.word	0x08002f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fa3a 	bl	8003288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0208 	orr.w	r2, r2, #8
 8002e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6999      	ldr	r1, [r3, #24]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	619a      	str	r2, [r3, #24]
      break;
 8002e46:	e0a5      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 faaa 	bl	80033a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	021a      	lsls	r2, r3, #8
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]
      break;
 8002e88:	e084      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fb13 	bl	80034bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0208 	orr.w	r2, r2, #8
 8002ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0204 	bic.w	r2, r2, #4
 8002eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69d9      	ldr	r1, [r3, #28]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	61da      	str	r2, [r3, #28]
      break;
 8002ec8:	e064      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fb7b 	bl	80035cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	021a      	lsls	r2, r3, #8
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	61da      	str	r2, [r3, #28]
      break;
 8002f0a:	e043      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fbc4 	bl	80036a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0208 	orr.w	r2, r2, #8
 8002f26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f4a:	e023      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fc08 	bl	8003768 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f8c:	e002      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
      break;
 8002f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop

08002fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0b6      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x18a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003000:	d03e      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0xd8>
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003006:	f200 8087 	bhi.w	8003118 <HAL_TIM_ConfigClockSource+0x170>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300e:	f000 8086 	beq.w	800311e <HAL_TIM_ConfigClockSource+0x176>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003016:	d87f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003018:	2b70      	cmp	r3, #112	@ 0x70
 800301a:	d01a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xaa>
 800301c:	2b70      	cmp	r3, #112	@ 0x70
 800301e:	d87b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003020:	2b60      	cmp	r3, #96	@ 0x60
 8003022:	d050      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x11e>
 8003024:	2b60      	cmp	r3, #96	@ 0x60
 8003026:	d877      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003028:	2b50      	cmp	r3, #80	@ 0x50
 800302a:	d03c      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xfe>
 800302c:	2b50      	cmp	r3, #80	@ 0x50
 800302e:	d873      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d058      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x13e>
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d86f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003038:	2b30      	cmp	r3, #48	@ 0x30
 800303a:	d064      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15e>
 800303c:	2b30      	cmp	r3, #48	@ 0x30
 800303e:	d86b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d060      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15e>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d867      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d05c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15e>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d05a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15e>
 8003050:	e062      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	f000 fc61 	bl	8003928 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	609a      	str	r2, [r3, #8]
      break;
 800307e:	e04f      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	f000 fc4a 	bl	8003928 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e03c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 fbbe 	bl	8003834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2150      	movs	r1, #80	@ 0x50
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fc17 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e02c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 fbdd 	bl	8003892 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2160      	movs	r1, #96	@ 0x60
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fc07 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80030e4:	e01c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	461a      	mov	r2, r3
 80030f4:	f000 fb9e 	bl	8003834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2140      	movs	r1, #64	@ 0x40
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fbf7 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003104:	e00c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 fbee 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003116:	e003      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e000      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800311e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a46      	ldr	r2, [pc, #280]	@ (8003268 <TIM_Base_SetConfig+0x12c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315a:	d00f      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a43      	ldr	r2, [pc, #268]	@ (800326c <TIM_Base_SetConfig+0x130>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a42      	ldr	r2, [pc, #264]	@ (8003270 <TIM_Base_SetConfig+0x134>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a41      	ldr	r2, [pc, #260]	@ (8003274 <TIM_Base_SetConfig+0x138>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a40      	ldr	r2, [pc, #256]	@ (8003278 <TIM_Base_SetConfig+0x13c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a35      	ldr	r2, [pc, #212]	@ (8003268 <TIM_Base_SetConfig+0x12c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319c:	d01b      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a32      	ldr	r2, [pc, #200]	@ (800326c <TIM_Base_SetConfig+0x130>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d017      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a31      	ldr	r2, [pc, #196]	@ (8003270 <TIM_Base_SetConfig+0x134>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a30      	ldr	r2, [pc, #192]	@ (8003274 <TIM_Base_SetConfig+0x138>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00f      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003278 <TIM_Base_SetConfig+0x13c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2e      	ldr	r2, [pc, #184]	@ (800327c <TIM_Base_SetConfig+0x140>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003280 <TIM_Base_SetConfig+0x144>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <TIM_Base_SetConfig+0x148>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <TIM_Base_SetConfig+0x12c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00f      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a18      	ldr	r2, [pc, #96]	@ (8003278 <TIM_Base_SetConfig+0x13c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a17      	ldr	r2, [pc, #92]	@ (800327c <TIM_Base_SetConfig+0x140>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a16      	ldr	r2, [pc, #88]	@ (8003280 <TIM_Base_SetConfig+0x144>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <TIM_Base_SetConfig+0x148>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d105      	bne.n	800325a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f023 0201 	bic.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]
  }
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40013400 	.word	0x40013400
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800

08003288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f023 0201 	bic.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 0302 	bic.w	r3, r3, #2
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003394 <TIM_OC1_SetConfig+0x10c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00f      	beq.n	8003308 <TIM_OC1_SetConfig+0x80>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003398 <TIM_OC1_SetConfig+0x110>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00b      	beq.n	8003308 <TIM_OC1_SetConfig+0x80>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a2a      	ldr	r2, [pc, #168]	@ (800339c <TIM_OC1_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <TIM_OC1_SetConfig+0x80>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a29      	ldr	r2, [pc, #164]	@ (80033a0 <TIM_OC1_SetConfig+0x118>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_OC1_SetConfig+0x80>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a28      	ldr	r2, [pc, #160]	@ (80033a4 <TIM_OC1_SetConfig+0x11c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d10c      	bne.n	8003322 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0308 	bic.w	r3, r3, #8
 800330e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1b      	ldr	r2, [pc, #108]	@ (8003394 <TIM_OC1_SetConfig+0x10c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00f      	beq.n	800334a <TIM_OC1_SetConfig+0xc2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1a      	ldr	r2, [pc, #104]	@ (8003398 <TIM_OC1_SetConfig+0x110>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_OC1_SetConfig+0xc2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a19      	ldr	r2, [pc, #100]	@ (800339c <TIM_OC1_SetConfig+0x114>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_OC1_SetConfig+0xc2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <TIM_OC1_SetConfig+0x118>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_OC1_SetConfig+0xc2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a17      	ldr	r2, [pc, #92]	@ (80033a4 <TIM_OC1_SetConfig+0x11c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d111      	bne.n	800336e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40013400 	.word	0x40013400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800

080033a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f023 0210 	bic.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0320 	bic.w	r3, r3, #32
 80033f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a28      	ldr	r2, [pc, #160]	@ (80034a8 <TIM_OC2_SetConfig+0x100>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_OC2_SetConfig+0x6c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a27      	ldr	r2, [pc, #156]	@ (80034ac <TIM_OC2_SetConfig+0x104>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10d      	bne.n	8003430 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800341a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800342e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <TIM_OC2_SetConfig+0x100>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00f      	beq.n	8003458 <TIM_OC2_SetConfig+0xb0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1c      	ldr	r2, [pc, #112]	@ (80034ac <TIM_OC2_SetConfig+0x104>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00b      	beq.n	8003458 <TIM_OC2_SetConfig+0xb0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a1b      	ldr	r2, [pc, #108]	@ (80034b0 <TIM_OC2_SetConfig+0x108>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <TIM_OC2_SetConfig+0xb0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a1a      	ldr	r2, [pc, #104]	@ (80034b4 <TIM_OC2_SetConfig+0x10c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_OC2_SetConfig+0xb0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <TIM_OC2_SetConfig+0x110>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d113      	bne.n	8003480 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800345e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40013400 	.word	0x40013400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40014400 	.word	0x40014400
 80034b8:	40014800 	.word	0x40014800

080034bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <TIM_OC3_SetConfig+0xfc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d003      	beq.n	8003526 <TIM_OC3_SetConfig+0x6a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a26      	ldr	r2, [pc, #152]	@ (80035bc <TIM_OC3_SetConfig+0x100>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10d      	bne.n	8003542 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800352c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1c      	ldr	r2, [pc, #112]	@ (80035b8 <TIM_OC3_SetConfig+0xfc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00f      	beq.n	800356a <TIM_OC3_SetConfig+0xae>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1b      	ldr	r2, [pc, #108]	@ (80035bc <TIM_OC3_SetConfig+0x100>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_OC3_SetConfig+0xae>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <TIM_OC3_SetConfig+0x104>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_OC3_SetConfig+0xae>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a19      	ldr	r2, [pc, #100]	@ (80035c4 <TIM_OC3_SetConfig+0x108>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_OC3_SetConfig+0xae>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a18      	ldr	r2, [pc, #96]	@ (80035c8 <TIM_OC3_SetConfig+0x10c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d113      	bne.n	8003592 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	621a      	str	r2, [r3, #32]
}
 80035ac:	bf00      	nop
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40013400 	.word	0x40013400
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800

080035cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800361a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	031b      	lsls	r3, r3, #12
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a18      	ldr	r2, [pc, #96]	@ (800368c <TIM_OC4_SetConfig+0xc0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00f      	beq.n	8003650 <TIM_OC4_SetConfig+0x84>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <TIM_OC4_SetConfig+0xc4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00b      	beq.n	8003650 <TIM_OC4_SetConfig+0x84>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a16      	ldr	r2, [pc, #88]	@ (8003694 <TIM_OC4_SetConfig+0xc8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <TIM_OC4_SetConfig+0x84>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a15      	ldr	r2, [pc, #84]	@ (8003698 <TIM_OC4_SetConfig+0xcc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_OC4_SetConfig+0x84>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a14      	ldr	r2, [pc, #80]	@ (800369c <TIM_OC4_SetConfig+0xd0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d109      	bne.n	8003664 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	019b      	lsls	r3, r3, #6
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40013400 	.word	0x40013400
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800

080036a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80036e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <TIM_OC5_SetConfig+0xb4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00f      	beq.n	800371a <TIM_OC5_SetConfig+0x7a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a16      	ldr	r2, [pc, #88]	@ (8003758 <TIM_OC5_SetConfig+0xb8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00b      	beq.n	800371a <TIM_OC5_SetConfig+0x7a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a15      	ldr	r2, [pc, #84]	@ (800375c <TIM_OC5_SetConfig+0xbc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <TIM_OC5_SetConfig+0x7a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a14      	ldr	r2, [pc, #80]	@ (8003760 <TIM_OC5_SetConfig+0xc0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_OC5_SetConfig+0x7a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a13      	ldr	r2, [pc, #76]	@ (8003764 <TIM_OC5_SetConfig+0xc4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d109      	bne.n	800372e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003720:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	621a      	str	r2, [r3, #32]
}
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40013400 	.word	0x40013400
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800

08003768 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	051b      	lsls	r3, r3, #20
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a18      	ldr	r2, [pc, #96]	@ (8003820 <TIM_OC6_SetConfig+0xb8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00f      	beq.n	80037e4 <TIM_OC6_SetConfig+0x7c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a17      	ldr	r2, [pc, #92]	@ (8003824 <TIM_OC6_SetConfig+0xbc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <TIM_OC6_SetConfig+0x7c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a16      	ldr	r2, [pc, #88]	@ (8003828 <TIM_OC6_SetConfig+0xc0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <TIM_OC6_SetConfig+0x7c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a15      	ldr	r2, [pc, #84]	@ (800382c <TIM_OC6_SetConfig+0xc4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC6_SetConfig+0x7c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a14      	ldr	r2, [pc, #80]	@ (8003830 <TIM_OC6_SetConfig+0xc8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d109      	bne.n	80037f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40013400 	.word	0x40013400
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400
 8003830:	40014800 	.word	0x40014800

08003834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f023 0201 	bic.w	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800385e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 030a 	bic.w	r3, r3, #10
 8003870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003892:	b480      	push	{r7}
 8003894:	b087      	sub	sp, #28
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 0210 	bic.w	r2, r3, #16
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	031b      	lsls	r3, r3, #12
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	f043 0307 	orr.w	r3, r3, #7
 8003914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	021a      	lsls	r2, r3, #8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	431a      	orrs	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e068      	b.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a2e      	ldr	r2, [pc, #184]	@ (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d108      	bne.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3e:	d018      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a18      	ldr	r2, [pc, #96]	@ (8003abc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a13      	ldr	r2, [pc, #76]	@ (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10c      	bne.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40013400 	.word	0x40013400
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40014000 	.word	0x40014000

08003ac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e065      	b.n	8003bac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	@ (8003bb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a14      	ldr	r2, [pc, #80]	@ (8003bbc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d115      	bne.n	8003b9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	051b      	lsls	r3, r3, #20
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40013400 	.word	0x40013400

08003bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e040      	b.n	8003c54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fc ff54 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	@ 0x24
 8003bec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fae0 	bl	80041cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f825 	bl	8003c5c <UART_SetConfig>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e01b      	b.n	8003c54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fb5f 	bl	8004310 <UART_CheckIdleState>
 8003c52:	4603      	mov	r3, r0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c60:	b08a      	sub	sp, #40	@ 0x28
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4ba4      	ldr	r3, [pc, #656]	@ (8003f1c <UART_SetConfig+0x2c0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a99      	ldr	r2, [pc, #612]	@ (8003f20 <UART_SetConfig+0x2c4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a90      	ldr	r2, [pc, #576]	@ (8003f24 <UART_SetConfig+0x2c8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d126      	bne.n	8003d34 <UART_SetConfig+0xd8>
 8003ce6:	4b90      	ldr	r3, [pc, #576]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d81b      	bhi.n	8003d2c <UART_SetConfig+0xd0>
 8003cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <UART_SetConfig+0xa0>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d1d 	.word	0x08003d1d
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d25 	.word	0x08003d25
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d12:	e116      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003d14:	2302      	movs	r3, #2
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1a:	e112      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e10e      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003d24:	2308      	movs	r3, #8
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e10a      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e106      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7c      	ldr	r2, [pc, #496]	@ (8003f2c <UART_SetConfig+0x2d0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d138      	bne.n	8003db0 <UART_SetConfig+0x154>
 8003d3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b0c      	cmp	r3, #12
 8003d4a:	d82d      	bhi.n	8003da8 <UART_SetConfig+0x14c>
 8003d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <UART_SetConfig+0xf8>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d89 	.word	0x08003d89
 8003d58:	08003da9 	.word	0x08003da9
 8003d5c:	08003da9 	.word	0x08003da9
 8003d60:	08003da9 	.word	0x08003da9
 8003d64:	08003d99 	.word	0x08003d99
 8003d68:	08003da9 	.word	0x08003da9
 8003d6c:	08003da9 	.word	0x08003da9
 8003d70:	08003da9 	.word	0x08003da9
 8003d74:	08003d91 	.word	0x08003d91
 8003d78:	08003da9 	.word	0x08003da9
 8003d7c:	08003da9 	.word	0x08003da9
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003da1 	.word	0x08003da1
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8e:	e0d8      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003d90:	2302      	movs	r3, #2
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d96:	e0d4      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9e:	e0d0      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003da0:	2308      	movs	r3, #8
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da6:	e0cc      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003da8:	2310      	movs	r3, #16
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dae:	e0c8      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f30 <UART_SetConfig+0x2d4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d125      	bne.n	8003e06 <UART_SetConfig+0x1aa>
 8003dba:	4b5b      	ldr	r3, [pc, #364]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003dc4:	2b30      	cmp	r3, #48	@ 0x30
 8003dc6:	d016      	beq.n	8003df6 <UART_SetConfig+0x19a>
 8003dc8:	2b30      	cmp	r3, #48	@ 0x30
 8003dca:	d818      	bhi.n	8003dfe <UART_SetConfig+0x1a2>
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d00a      	beq.n	8003de6 <UART_SetConfig+0x18a>
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d814      	bhi.n	8003dfe <UART_SetConfig+0x1a2>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <UART_SetConfig+0x182>
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d008      	beq.n	8003dee <UART_SetConfig+0x192>
 8003ddc:	e00f      	b.n	8003dfe <UART_SetConfig+0x1a2>
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de4:	e0ad      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003de6:	2302      	movs	r3, #2
 8003de8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dec:	e0a9      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003dee:	2304      	movs	r3, #4
 8003df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df4:	e0a5      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003df6:	2308      	movs	r3, #8
 8003df8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfc:	e0a1      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003dfe:	2310      	movs	r3, #16
 8003e00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e04:	e09d      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f34 <UART_SetConfig+0x2d8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d125      	bne.n	8003e5c <UART_SetConfig+0x200>
 8003e10:	4b45      	ldr	r3, [pc, #276]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e1c:	d016      	beq.n	8003e4c <UART_SetConfig+0x1f0>
 8003e1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e20:	d818      	bhi.n	8003e54 <UART_SetConfig+0x1f8>
 8003e22:	2b80      	cmp	r3, #128	@ 0x80
 8003e24:	d00a      	beq.n	8003e3c <UART_SetConfig+0x1e0>
 8003e26:	2b80      	cmp	r3, #128	@ 0x80
 8003e28:	d814      	bhi.n	8003e54 <UART_SetConfig+0x1f8>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <UART_SetConfig+0x1d8>
 8003e2e:	2b40      	cmp	r3, #64	@ 0x40
 8003e30:	d008      	beq.n	8003e44 <UART_SetConfig+0x1e8>
 8003e32:	e00f      	b.n	8003e54 <UART_SetConfig+0x1f8>
 8003e34:	2300      	movs	r3, #0
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3a:	e082      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e42:	e07e      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003e44:	2304      	movs	r3, #4
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e4a:	e07a      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e52:	e076      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003e54:	2310      	movs	r3, #16
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5a:	e072      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a35      	ldr	r2, [pc, #212]	@ (8003f38 <UART_SetConfig+0x2dc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d12a      	bne.n	8003ebc <UART_SetConfig+0x260>
 8003e66:	4b30      	ldr	r3, [pc, #192]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e74:	d01a      	beq.n	8003eac <UART_SetConfig+0x250>
 8003e76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e7a:	d81b      	bhi.n	8003eb4 <UART_SetConfig+0x258>
 8003e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e80:	d00c      	beq.n	8003e9c <UART_SetConfig+0x240>
 8003e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e86:	d815      	bhi.n	8003eb4 <UART_SetConfig+0x258>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <UART_SetConfig+0x238>
 8003e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e90:	d008      	beq.n	8003ea4 <UART_SetConfig+0x248>
 8003e92:	e00f      	b.n	8003eb4 <UART_SetConfig+0x258>
 8003e94:	2300      	movs	r3, #0
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9a:	e052      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea2:	e04e      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eaa:	e04a      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003eac:	2308      	movs	r3, #8
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb2:	e046      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eba:	e042      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a17      	ldr	r2, [pc, #92]	@ (8003f20 <UART_SetConfig+0x2c4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d13a      	bne.n	8003f3c <UART_SetConfig+0x2e0>
 8003ec6:	4b18      	ldr	r3, [pc, #96]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ecc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ed4:	d01a      	beq.n	8003f0c <UART_SetConfig+0x2b0>
 8003ed6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eda:	d81b      	bhi.n	8003f14 <UART_SetConfig+0x2b8>
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee0:	d00c      	beq.n	8003efc <UART_SetConfig+0x2a0>
 8003ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee6:	d815      	bhi.n	8003f14 <UART_SetConfig+0x2b8>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <UART_SetConfig+0x298>
 8003eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef0:	d008      	beq.n	8003f04 <UART_SetConfig+0x2a8>
 8003ef2:	e00f      	b.n	8003f14 <UART_SetConfig+0x2b8>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efa:	e022      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003efc:	2302      	movs	r3, #2
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f02:	e01e      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003f04:	2304      	movs	r3, #4
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0a:	e01a      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f12:	e016      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003f14:	2310      	movs	r3, #16
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1a:	e012      	b.n	8003f42 <UART_SetConfig+0x2e6>
 8003f1c:	efff69f3 	.word	0xefff69f3
 8003f20:	40008000 	.word	0x40008000
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40004400 	.word	0x40004400
 8003f30:	40004800 	.word	0x40004800
 8003f34:	40004c00 	.word	0x40004c00
 8003f38:	40005000 	.word	0x40005000
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a9f      	ldr	r2, [pc, #636]	@ (80041c4 <UART_SetConfig+0x568>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d17a      	bne.n	8004042 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d824      	bhi.n	8003f9e <UART_SetConfig+0x342>
 8003f54:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <UART_SetConfig+0x300>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003f9f 	.word	0x08003f9f
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003f9f 	.word	0x08003f9f
 8003f6c:	08003f8f 	.word	0x08003f8f
 8003f70:	08003f9f 	.word	0x08003f9f
 8003f74:	08003f9f 	.word	0x08003f9f
 8003f78:	08003f9f 	.word	0x08003f9f
 8003f7c:	08003f97 	.word	0x08003f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f80:	f7fd ff62 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8003f84:	61f8      	str	r0, [r7, #28]
        break;
 8003f86:	e010      	b.n	8003faa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f88:	4b8f      	ldr	r3, [pc, #572]	@ (80041c8 <UART_SetConfig+0x56c>)
 8003f8a:	61fb      	str	r3, [r7, #28]
        break;
 8003f8c:	e00d      	b.n	8003faa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8e:	f7fd fec3 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8003f92:	61f8      	str	r0, [r7, #28]
        break;
 8003f94:	e009      	b.n	8003faa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f9a:	61fb      	str	r3, [r7, #28]
        break;
 8003f9c:	e005      	b.n	8003faa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80fb 	beq.w	80041a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d305      	bcc.n	8003fce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d903      	bls.n	8003fd6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fd4:	e0e8      	b.n	80041a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	461c      	mov	r4, r3
 8003fdc:	4615      	mov	r5, r2
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	022b      	lsls	r3, r5, #8
 8003fe8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fec:	0222      	lsls	r2, r4, #8
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	6849      	ldr	r1, [r1, #4]
 8003ff2:	0849      	lsrs	r1, r1, #1
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	4688      	mov	r8, r1
 8003ff8:	4681      	mov	r9, r0
 8003ffa:	eb12 0a08 	adds.w	sl, r2, r8
 8003ffe:	eb43 0b09 	adc.w	fp, r3, r9
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004010:	4650      	mov	r0, sl
 8004012:	4659      	mov	r1, fp
 8004014:	f7fc f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004026:	d308      	bcc.n	800403a <UART_SetConfig+0x3de>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800402e:	d204      	bcs.n	800403a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	60da      	str	r2, [r3, #12]
 8004038:	e0b6      	b.n	80041a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004040:	e0b2      	b.n	80041a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800404a:	d15e      	bne.n	800410a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800404c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004050:	2b08      	cmp	r3, #8
 8004052:	d828      	bhi.n	80040a6 <UART_SetConfig+0x44a>
 8004054:	a201      	add	r2, pc, #4	@ (adr r2, 800405c <UART_SetConfig+0x400>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	080040a7 	.word	0x080040a7
 800406c:	08004097 	.word	0x08004097
 8004070:	080040a7 	.word	0x080040a7
 8004074:	080040a7 	.word	0x080040a7
 8004078:	080040a7 	.word	0x080040a7
 800407c:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fd fee2 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8004084:	61f8      	str	r0, [r7, #28]
        break;
 8004086:	e014      	b.n	80040b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7fd fef4 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 800408c:	61f8      	str	r0, [r7, #28]
        break;
 800408e:	e010      	b.n	80040b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b4d      	ldr	r3, [pc, #308]	@ (80041c8 <UART_SetConfig+0x56c>)
 8004092:	61fb      	str	r3, [r7, #28]
        break;
 8004094:	e00d      	b.n	80040b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fd fe3f 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 800409a:	61f8      	str	r0, [r7, #28]
        break;
 800409c:	e009      	b.n	80040b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a2:	61fb      	str	r3, [r7, #28]
        break;
 80040a4:	e005      	b.n	80040b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d077      	beq.n	80041a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005a      	lsls	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	441a      	add	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b0f      	cmp	r3, #15
 80040d2:	d916      	bls.n	8004102 <UART_SetConfig+0x4a6>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040da:	d212      	bcs.n	8004102 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f023 030f 	bic.w	r3, r3, #15
 80040e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	8afb      	ldrh	r3, [r7, #22]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	8afa      	ldrh	r2, [r7, #22]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e052      	b.n	80041a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004108:	e04e      	b.n	80041a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800410a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800410e:	2b08      	cmp	r3, #8
 8004110:	d827      	bhi.n	8004162 <UART_SetConfig+0x506>
 8004112:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <UART_SetConfig+0x4bc>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004145 	.word	0x08004145
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004163 	.word	0x08004163
 8004128:	08004153 	.word	0x08004153
 800412c:	08004163 	.word	0x08004163
 8004130:	08004163 	.word	0x08004163
 8004134:	08004163 	.word	0x08004163
 8004138:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7fd fe84 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8004140:	61f8      	str	r0, [r7, #28]
        break;
 8004142:	e014      	b.n	800416e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fd fe96 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8004148:	61f8      	str	r0, [r7, #28]
        break;
 800414a:	e010      	b.n	800416e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b1e      	ldr	r3, [pc, #120]	@ (80041c8 <UART_SetConfig+0x56c>)
 800414e:	61fb      	str	r3, [r7, #28]
        break;
 8004150:	e00d      	b.n	800416e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7fd fde1 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8004156:	61f8      	str	r0, [r7, #28]
        break;
 8004158:	e009      	b.n	800416e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800415e:	61fb      	str	r3, [r7, #28]
        break;
 8004160:	e005      	b.n	800416e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800416c:	bf00      	nop
    }

    if (pclk != 0U)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d019      	beq.n	80041a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	085a      	lsrs	r2, r3, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	441a      	add	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	d909      	bls.n	80041a2 <UART_SetConfig+0x546>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004194:	d205      	bcs.n	80041a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60da      	str	r2, [r3, #12]
 80041a0:	e002      	b.n	80041a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3728      	adds	r7, #40	@ 0x28
 80041bc:	46bd      	mov	sp, r7
 80041be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c2:	bf00      	nop
 80041c4:	40008000 	.word	0x40008000
 80041c8:	00f42400 	.word	0x00f42400

080041cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ca:	d10a      	bne.n	80042e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b098      	sub	sp, #96	@ 0x60
 8004314:	af02      	add	r7, sp, #8
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004320:	f7fc fcee 	bl	8000d00 <HAL_GetTick>
 8004324:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d12e      	bne.n	8004392 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433c:	2200      	movs	r2, #0
 800433e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f88c 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d021      	beq.n	8004392 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004362:	653b      	str	r3, [r7, #80]	@ 0x50
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800436c:	647b      	str	r3, [r7, #68]	@ 0x44
 800436e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e062      	b.n	8004458 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d149      	bne.n	8004434 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a8:	2200      	movs	r2, #0
 80043aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f856 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d03c      	beq.n	8004434 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	623b      	str	r3, [r7, #32]
   return(result);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e6      	bne.n	80043ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800440c:	61fa      	str	r2, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	617b      	str	r3, [r7, #20]
   return(result);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e011      	b.n	8004458 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3758      	adds	r7, #88	@ 0x58
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004470:	e04f      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d04b      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fc fc41 	bl	8000d00 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <UART_WaitOnFlagUntilTimeout+0x30>
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e04e      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d037      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b80      	cmp	r3, #128	@ 0x80
 80044a6:	d034      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d031      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d110      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2208      	movs	r2, #8
 80044c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f838 	bl	800453a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2208      	movs	r2, #8
 80044ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e029      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ec:	d111      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f81e 	bl	800453a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e00f      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d0a0      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800453a:	b480      	push	{r7}
 800453c:	b095      	sub	sp, #84	@ 0x54
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004560:	643b      	str	r3, [r7, #64]	@ 0x40
 8004562:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e6      	bne.n	8004542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	61fb      	str	r3, [r7, #28]
   return(result);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3308      	adds	r3, #8
 8004592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004594:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800459a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e5      	bne.n	8004574 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d118      	bne.n	80045e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f023 0310 	bic.w	r3, r3, #16
 80045c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6979      	ldr	r1, [r7, #20]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	613b      	str	r3, [r7, #16]
   return(result);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e6      	bne.n	80045b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045f6:	bf00      	nop
 80045f8:	3754      	adds	r7, #84	@ 0x54
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <memset>:
 8004602:	4402      	add	r2, r0
 8004604:	4603      	mov	r3, r0
 8004606:	4293      	cmp	r3, r2
 8004608:	d100      	bne.n	800460c <memset+0xa>
 800460a:	4770      	bx	lr
 800460c:	f803 1b01 	strb.w	r1, [r3], #1
 8004610:	e7f9      	b.n	8004606 <memset+0x4>
	...

08004614 <__libc_init_array>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4d0d      	ldr	r5, [pc, #52]	@ (800464c <__libc_init_array+0x38>)
 8004618:	4c0d      	ldr	r4, [pc, #52]	@ (8004650 <__libc_init_array+0x3c>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	2600      	movs	r6, #0
 8004620:	42a6      	cmp	r6, r4
 8004622:	d109      	bne.n	8004638 <__libc_init_array+0x24>
 8004624:	4d0b      	ldr	r5, [pc, #44]	@ (8004654 <__libc_init_array+0x40>)
 8004626:	4c0c      	ldr	r4, [pc, #48]	@ (8004658 <__libc_init_array+0x44>)
 8004628:	f000 f818 	bl	800465c <_init>
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	2600      	movs	r6, #0
 8004632:	42a6      	cmp	r6, r4
 8004634:	d105      	bne.n	8004642 <__libc_init_array+0x2e>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	f855 3b04 	ldr.w	r3, [r5], #4
 800463c:	4798      	blx	r3
 800463e:	3601      	adds	r6, #1
 8004640:	e7ee      	b.n	8004620 <__libc_init_array+0xc>
 8004642:	f855 3b04 	ldr.w	r3, [r5], #4
 8004646:	4798      	blx	r3
 8004648:	3601      	adds	r6, #1
 800464a:	e7f2      	b.n	8004632 <__libc_init_array+0x1e>
 800464c:	080046c4 	.word	0x080046c4
 8004650:	080046c4 	.word	0x080046c4
 8004654:	080046c4 	.word	0x080046c4
 8004658:	080046c8 	.word	0x080046c8

0800465c <_init>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr

08004668 <_fini>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr
